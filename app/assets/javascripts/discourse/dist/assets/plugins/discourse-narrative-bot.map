{"version":3,"sources":["discourse/plugins/discourse-narrative-bot/initializers/new-user-narrative.js"],"sourcesContent":["define(\"discourse/plugins/discourse-narrative-bot/initializers/new-user-narrative\", [\"exports\", \"discourse/lib/ajax\", \"discourse-common/lib/debounce\", \"discourse/lib/offset-calculator\", \"discourse/lib/is-element-in-viewport\", \"discourse/lib/plugin-api\"], function (_exports, _ajax, _debounce, _offsetCalculator, _isElementInViewport, _pluginApi) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.default = void 0;\n  0; //eaimeta@70e063a35619d71f0,\"discourse/lib/ajax\",0,\"discourse-common/lib/debounce\",0,\"discourse/lib/offset-calculator\",0,\"discourse/lib/is-element-in-viewport\",0,\"discourse/lib/plugin-api\"eaimeta@70e063a35619d71f\n\n  const PLUGIN_ID = \"new-user-narrative\";\n\n  function initialize(api) {\n    const messageBus = api.container.lookup(\"service:message-bus\");\n    const currentUser = api.getCurrentUser();\n    const appEvents = api.container.lookup(\"service:app-events\");\n    api.modifyClass(\"component:site-header\", {\n      pluginId: PLUGIN_ID,\n\n      didInsertElement() {\n        this._super(...arguments);\n\n        this.dispatch(\"header:search-context-trigger\", \"header\");\n      }\n\n    });\n    api.modifyClass(\"controller:topic\", {\n      pluginId: PLUGIN_ID,\n\n      _modifyBookmark(bookmark, post) {\n        // if we are talking to discobot then any bookmarks should just\n        // be created without reminder options, to streamline the new user\n        // narrative.\n        const discobotUserId = -2;\n\n        if (post && post.user_id === discobotUserId && !post.bookmarked) {\n          return (0, _ajax.ajax)(\"/bookmarks\", {\n            type: \"POST\",\n            data: {\n              post_id: post.id\n            }\n          }).then(response => {\n            post.setProperties({\n              \"topic.bookmarked\": true,\n              bookmarked: true,\n              bookmark_id: response.id\n            });\n            post.appEvents.trigger(\"post-stream:refresh\", {\n              id: this.id\n            });\n          });\n        }\n\n        return this._super(bookmark, post);\n      },\n\n      subscribe() {\n        this._super(...arguments);\n\n        this.messageBus.subscribe(`/topic/${this.model.id}`, data => {\n          const topic = this.model; // scroll only for discobot (-2 is discobot id)\n\n          if (topic.isPrivateMessage && this.currentUser && this.currentUser.id !== data.user_id && data.user_id === -2 && data.type === \"created\") {\n            const postNumber = data.post_number;\n            const notInPostStream = topic.get(\"highest_post_number\") <= postNumber;\n            const postNumberDifference = postNumber - topic.currentPost;\n\n            if (notInPostStream && postNumberDifference > 0 && postNumberDifference < 7) {\n              this._scrollToDiscobotPost(data.post_number);\n            }\n          }\n        }); // No need to unsubscribe, core unsubscribes /topic/* routes\n      },\n\n      _scrollToDiscobotPost(postNumber) {\n        (0, _debounce.default)(this, function () {\n          const post = document.querySelector(`.topic-post article#post_${postNumber}`);\n\n          if (!post || (0, _isElementInViewport.default)(post)) {\n            return;\n          }\n\n          const viewportOffset = post.getBoundingClientRect();\n          window.scrollTo({\n            top: window.scrollY + viewportOffset.top - (0, _offsetCalculator.headerOffset)(),\n            behavior: \"smooth\"\n          });\n        }, postNumber, 500);\n      }\n\n    });\n    api.attachWidgetAction(\"header\", \"headerSearchContextTrigger\", function () {\n      if (this.site.mobileView) {\n        this.state.skipSearchContext = false;\n      } else {\n        this.state.contextEnabled = true;\n        this.state.searchContextType = \"topic\";\n      }\n    });\n\n    if (messageBus && currentUser) {\n      messageBus.subscribe(`/new_user_narrative/tutorial_search`, () => {\n        appEvents.trigger(\"header:search-context-trigger\");\n      });\n    }\n  }\n\n  var _default = {\n    name: \"new-user-narrative\",\n\n    initialize(container) {\n      const siteSettings = container.lookup(\"service:site-settings\");\n\n      if (siteSettings.discourse_narrative_bot_enabled) {\n        (0, _pluginApi.withPluginApi)(\"0.8.7\", initialize);\n      }\n    }\n\n  };\n  _exports.default = _default;\n});"],"names":[],"mappingsfile":"discourse-narrative-bot.js"}