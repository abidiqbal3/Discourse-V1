{"version":3,"sources":["discourse/plugins/discourse-local-dates/acceptance/download-calendar-test.js","discourse/plugins/discourse-local-dates/acceptance/local-dates-composer-test.js","discourse/plugins/discourse-local-dates/acceptance/local-dates-quoting-test.js","discourse/plugins/discourse-local-dates/lib/date-with-zone-helper-test.js","discourse/plugins/discourse-local-dates/lib/local-date-builder-test.js"],"sourcesContent":["define(\"discourse/plugins/discourse-local-dates/acceptance/download-calendar-test\", [\"discourse/tests/helpers/qunit-helpers\", \"@ember/test-helpers\", \"I18n\", \"qunit\", \"discourse/tests/helpers/create-pretender\", \"sinon\", \"discourse-common/lib/object\"], function (_qunitHelpers, _testHelpers, _I18n, _qunit, _createPretender, _sinon, _object) {\n  \"use strict\";\n\n  0; //eaimeta@70e063a35619d71f0,\"discourse/tests/helpers/qunit-helpers\",0,\"@ember/test-helpers\",0,\"I18n\",0,\"qunit\",0,\"discourse/tests/helpers/create-pretender\",0,\"sinon\",0,\"discourse-common/lib/object\"eaimeta@70e063a35619d71f\n\n  (0, _qunitHelpers.acceptance)(\"Local Dates - Download calendar without default calendar option set\", function (needs) {\n    needs.user({\n      default_calendar: \"none_selected\"\n    });\n    needs.settings({\n      discourse_local_dates_enabled: true\n    });\n    needs.pretender((server, helper) => {\n      const response = (0, _object.cloneJSON)(_createPretender.fixturesByUrl[\"/t/281.json\"]);\n      const startDate = moment.tz(\"Africa/Cairo\").add(1, \"days\").format(\"YYYY-MM-DD\");\n      response.post_stream.posts[0].cooked = `<p><span data-date=\\\"${startDate}\\\" data-time=\\\"13:00:00\\\" class=\\\"discourse-local-date\\\" data-timezone=\\\"Africa/Cairo\\\" data-email-preview=\\\"${startDate}T11:00:00Z UTC\\\">${startDate}T11:00:00Z</span></p>`;\n      server.get(\"/t/281.json\", () => helper.response(response));\n    });\n    (0, _qunit.test)(\"Display pick calendar modal\", async function (assert) {\n      await (0, _testHelpers.visit)(\"/t/local-dates/281\");\n      await (0, _testHelpers.click)(\".discourse-local-date\");\n      await (0, _testHelpers.click)(document.querySelector(\".download-calendar\"));\n      assert.strictEqual((0, _qunitHelpers.query)(\"#discourse-modal-title\").textContent.trim(), _I18n.default.t(\"download_calendar.title\"), \"it should display modal to select calendar\");\n    });\n  });\n  (0, _qunitHelpers.acceptance)(\"Local Dates - Download calendar is not available for dates in the past\", function (needs) {\n    needs.user({\n      default_calendar: \"none_selected\"\n    });\n    needs.settings({\n      discourse_local_dates_enabled: true\n    });\n    needs.pretender((server, helper) => {\n      const response = (0, _object.cloneJSON)(_createPretender.fixturesByUrl[\"/t/281.json\"]);\n      const startDate = moment.tz(\"Africa/Cairo\").subtract(1, \"days\").format(\"YYYY-MM-DD\");\n      response.post_stream.posts[0].cooked = `<p><span data-date=\\\"${startDate}\\\" data-time=\\\"13:00:00\\\" class=\\\"discourse-local-date\\\" data-timezone=\\\"Africa/Cairo\\\" data-email-preview=\\\"${startDate}T11:00:00Z UTC\\\">${startDate}T11:00:00Z</span></p>`;\n      server.get(\"/t/281.json\", () => helper.response(response));\n    });\n    (0, _qunit.test)(\"Does not show add to calendar button\", async function (assert) {\n      await (0, _testHelpers.visit)(\"/t/local-dates/281\");\n      await (0, _testHelpers.click)(\".discourse-local-date\");\n      assert.ok(!(0, _qunitHelpers.exists)(document.querySelector(\".download-calendar\")));\n    });\n  });\n  (0, _qunitHelpers.acceptance)(\"Local Dates - Download calendar with default calendar option set\", function (needs) {\n    needs.user({\n      default_calendar: \"google\"\n    });\n    needs.settings({\n      discourse_local_dates_enabled: true\n    });\n    needs.pretender((server, helper) => {\n      const response = (0, _object.cloneJSON)(_createPretender.fixturesByUrl[\"/t/281.json\"]);\n      const startDate = moment.tz(\"Africa/Cairo\").add(1, \"days\").format(\"YYYY-MM-DD\");\n      response.post_stream.posts[0].cooked = `<p><span data-date=\\\"${startDate}\\\" data-time=\\\"13:00:00\\\" class=\\\"discourse-local-date\\\" data-timezone=\\\"Africa/Cairo\\\" data-email-preview=\\\"${startDate}T11:00:00Z UTC\\\">${startDate}T11:00:00Z</span></p>`;\n      response.title = \"   title to trim   \";\n      server.get(\"/t/281.json\", () => helper.response(response));\n    });\n    needs.hooks.beforeEach(function () {\n      let win = {\n        focus: function () {}\n      };\n\n      _sinon.default.stub(window, \"open\").returns(win);\n\n      _sinon.default.stub(win, \"focus\");\n    });\n    (0, _qunit.test)(\"saves into default calendar\", async function (assert) {\n      const startDate = moment.tz(\"Africa/Cairo\").add(1, \"days\").format(\"YYYYMMDD\");\n      await (0, _testHelpers.visit)(\"/t/local-dates/281\");\n      await (0, _testHelpers.click)(\".discourse-local-date\");\n      await (0, _testHelpers.click)(document.querySelector(\".download-calendar\"));\n      assert.ok(!(0, _qunitHelpers.exists)(document.querySelector(\"#discourse-modal-title\")));\n      assert.ok(window.open.calledWith(`https://www.google.com/calendar/event?action=TEMPLATE&text=title%20to%20trim&dates=${startDate}T110000Z/${startDate}T120000Z`, \"_blank\", \"noopener\", \"noreferrer\"));\n    });\n  });\n});","define(\"discourse/plugins/discourse-local-dates/acceptance/local-dates-composer-test\", [\"discourse/tests/helpers/qunit-helpers\", \"qunit\", \"@ember/test-helpers\", \"discourse/tests/helpers/select-kit-helper\"], function (_qunitHelpers, _qunit, _testHelpers, _selectKitHelper) {\n  \"use strict\";\n\n  0; //eaimeta@70e063a35619d71f0,\"discourse/tests/helpers/qunit-helpers\",0,\"qunit\",0,\"@ember/test-helpers\",0,\"discourse/tests/helpers/select-kit-helper\"eaimeta@70e063a35619d71f\n\n  (0, _qunitHelpers.acceptance)(\"Local Dates - composer\", function (needs) {\n    needs.user();\n    needs.settings({\n      discourse_local_dates_enabled: true\n    });\n    (0, _qunit.test)(\"composer bbcode\", async function (assert) {\n      const getAttr = attr => {\n        return (0, _qunitHelpers.query)(\".d-editor-preview .discourse-local-date.cooked-date\").getAttribute(`data-${attr}`);\n      };\n\n      await (0, _testHelpers.visit)(\"/\");\n      await (0, _testHelpers.click)(\"#create-topic\");\n      await (0, _testHelpers.fillIn)(\".d-editor-input\", '[date=2017-10-23 time=01:30:00 displayedTimezone=\"America/Chicago\" format=\"LLLL\" calendar=\"off\" recurring=\"1.weeks\" timezone=\" Asia/Calcutta\" timezones=\"Europe/Paris|America/Los_Angeles\"]');\n      assert.strictEqual(getAttr(\"date\"), \"2017-10-23\", \"it has the correct date\");\n      assert.strictEqual(getAttr(\"time\"), \"01:30:00\", \"it has the correct time\");\n      assert.strictEqual(getAttr(\"displayed-timezone\"), \"America/Chicago\", \"it has the correct displayed timezone\");\n      assert.strictEqual(getAttr(\"format\"), \"LLLL\", \"it has the correct format\");\n      assert.strictEqual(getAttr(\"timezones\"), \"Europe/Paris|America/Los_Angeles\", \"it has the correct timezones\");\n      assert.strictEqual(getAttr(\"recurring\"), \"1.weeks\", \"it has the correct recurring\");\n      assert.strictEqual(getAttr(\"timezone\"), \"Asia/Calcutta\", \"it has the correct timezone\");\n      await (0, _testHelpers.fillIn)(\".d-editor-input\", '[date=2017-10-24 format=\"LL\" timezone=\"Asia/Calcutta\" timezones=\"Europe/Paris|America/Los_Angeles\"]');\n      assert.strictEqual(getAttr(\"date\"), \"2017-10-24\", \"it has the correct date\");\n      assert.notOk(getAttr(\"time\"), \"it doesnâ€™t have time\");\n    });\n    (0, _qunit.test)(\"date modal\", async function (assert) {\n      await (0, _testHelpers.visit)(\"/\");\n      await (0, _testHelpers.click)(\"#create-topic\");\n      await (0, _testHelpers.click)(\".d-editor-button-bar .local-dates\");\n      const timezoneChooser = (0, _selectKitHelper.default)(\".timezone-input\");\n      await timezoneChooser.expand();\n      await timezoneChooser.selectRowByValue(\"Asia/Macau\");\n      assert.ok((0, _qunitHelpers.query)(\".preview .discourse-local-date\").textContent.includes(\"Macau\"), \"it outputs a preview date in selected timezone\");\n    });\n    (0, _qunit.test)(\"date modal - controls\", async function (assert) {\n      await (0, _testHelpers.visit)(\"/\");\n      await (0, _testHelpers.click)(\"#create-topic\");\n      await (0, _testHelpers.click)(\".d-editor-button-bar .local-dates\");\n      await (0, _testHelpers.click)('.pika-table td[data-day=\"5\"] > .pika-button');\n      assert.ok((0, _qunitHelpers.query)(\"#from-date-time\").textContent.includes(\"5,\"), \"selected FROM date works\");\n      await (0, _testHelpers.click)(\".date-time-control.to .date-time\");\n      assert.strictEqual((0, _qunitHelpers.queryAll)(\".pika-table .is-disabled\").length, 4, \"date just before selected FROM date is disabled\");\n      await (0, _testHelpers.click)('.pika-table td[data-day=\"10\"] > .pika-button');\n      assert.ok((0, _qunitHelpers.query)(\".date-time-control.to button\").textContent.includes(\"10,\"), \"selected TO date works\");\n      assert.strictEqual((0, _qunitHelpers.query)(\".pika-table .is-selected\").textContent, \"10\", \"selected date is the 10th\");\n      await (0, _testHelpers.click)(\".delete-to-date\");\n      assert.notOk((0, _qunitHelpers.query)(\".pika-table .is-selected\"), \"deleting selected TO date works\");\n    });\n  });\n});","define(\"discourse/plugins/discourse-local-dates/acceptance/local-dates-quoting-test\", [\"discourse-common/lib/object\", \"discourse/tests/fixtures/topic\", \"discourse/tests/helpers/qunit-helpers\", \"qunit\", \"@ember/test-helpers\"], function (_object, _topic, _qunitHelpers, _qunit, _testHelpers) {\n  \"use strict\";\n\n  0; //eaimeta@70e063a35619d71f0,\"discourse-common/lib/object\",0,\"discourse/tests/fixtures/topic\",0,\"discourse/tests/helpers/qunit-helpers\",0,\"qunit\",0,\"@ember/test-helpers\"eaimeta@70e063a35619d71f\n\n  (0, _qunitHelpers.acceptance)(\"Local Dates - quoting\", function (needs) {\n    needs.user();\n    needs.settings({\n      discourse_local_dates_enabled: true\n    });\n    needs.pretender((server, helper) => {\n      const topicResponse = (0, _object.cloneJSON)(_topic.default[\"/t/280/1.json\"]);\n      const firstPost = topicResponse.post_stream.posts[0];\n      firstPost.cooked += `<div class='select-local-date-test'>This is a test <span data-date=\"2022-06-17\" data-time=\"10:00:00\" class=\"discourse-local-date cooked-date past\" data-displayed-timezone=\"Australia/Perth\" data-timezone=\"Australia/Brisbane\" data-email-preview=\"2022-06-17T00:00:00Z UTC\" aria-label=\"Brisbane Friday, June 17, 2022\n\t<br />\n\t<svg class='fa d-icon d-icon-clock svg-icon svg-string'\n\t\txmlns=&quot;http://www.w3.org/2000/svg&quot;>\n\t\t<use href=&quot;#clock&quot; />\n\t</svg> 10:00 AM, Paris Friday, June 17, 2022\n\t<br />\n\t<svg class='fa d-icon d-icon-clock svg-icon svg-string'\n\t\txmlns=&quot;http://www.w3.org/2000/svg&quot;>\n\t\t<use href=&quot;#clock&quot; />\n\t</svg> 2:00 AM, Los Angeles Thursday, June 16, 2022\n\t<br />\n\t<svg class='fa d-icon d-icon-clock svg-icon svg-string'\n\t\txmlns=&quot;http://www.w3.org/2000/svg&quot;>\n\t\t<use href=&quot;#clock&quot; />\n\t</svg> 5:00 PM\" data-title=\"This is a new topic to check on chat quote issues\">\n  <svg class=\"fa d-icon d-icon-globe-americas svg-icon\" xmlns=\"http://www.w3.org/2000/svg\">\n    <use href=\"#globe-americas\"></use>\n  </svg>\n  <span class=\"relative-time\">June 17, 2022 8:00 AM (Perth)</span>\n</span></div>`;\n      server.get(\"/t/280.json\", () => helper.response(topicResponse));\n      server.get(\"/t/280/:post_number.json\", () => {\n        helper.response(topicResponse);\n      });\n    });\n    (0, _qunit.test)(\"quoting single local dates with basic options\", async function (assert) {\n      await (0, _testHelpers.visit)(\"/t/internationalization-localization/280\");\n      await (0, _qunitHelpers.selectText)(\"#post_1 .select-local-date-test\");\n      await (0, _testHelpers.click)(\".insert-quote\");\n      assert.strictEqual((0, _qunitHelpers.query)(\".d-editor-input\").value.trim(), `[quote=\\\"Uwe Keim, post:1, topic:280, username:uwe_keim\\\"]\nThis is a test [date=2022-06-17 time=10:00:00 timezone=\"Australia/Brisbane\" displayedTimezone=\"Australia/Perth\"]\n[/quote]`, \"converts the date to markdown with all options correctly\");\n    });\n  });\n  (0, _qunitHelpers.acceptance)(\"Local Dates - quoting range\", function (needs) {\n    needs.user();\n    needs.settings({\n      discourse_local_dates_enabled: true\n    });\n    needs.pretender((server, helper) => {\n      const topicResponse = (0, _object.cloneJSON)(_topic.default[\"/t/280/1.json\"]);\n      const firstPost = topicResponse.post_stream.posts[0];\n      firstPost.cooked += `<div class='select-local-date-test'><p dir=\"ltr\">Some text <span data-date=\"2022-06-17\" data-time=\"09:30:00\" class=\"discourse-local-date cooked-date past\" data-format=\"LL\" data-range=\"true\" data-timezones=\"Africa/Accra|Australia/Brisbane|Europe/Paris\" data-timezone=\"Australia/Brisbane\" data-email-preview=\"2022-06-16T23:30:00Z UTC\" aria-label=\"Brisbane Friday, June 17, 2022 9:30 AM â†’ Saturday, June 18, 2022 10:30 AM, Accra Thursday, June 16, 2022 11:30 PM â†’ Saturday, June 18, 2022 12:30 AM, Paris Friday, June 17, 2022 1:30 AM â†’ Saturday, June 18, 2022 2:30 AM\" data-title=\"This is a new topic to check on chat quote issues\">\n        <svg class=\"fa d-icon d-icon-globe-americas svg-icon\" xmlns=\"http://www.w3.org/2000/svg\">\n          <use href=\"#globe-americas\"></use>\n        </svg>\n        <span class=\"relative-time\">June 17, 2022</span>\n      </span>â†’<span data-date=\"2022-06-18\" data-time=\"10:30:00\" class=\"discourse-local-date cooked-date past\" data-format=\"LL\" data-range=\"true\" data-timezones=\"Africa/Accra|Australia/Brisbane|Europe/Paris\" data-timezone=\"Australia/Brisbane\" data-email-preview=\"2022-06-18T00:30:00Z UTC\" aria-label=\"Brisbane Friday, June 17, 2022 9:30 AM â†’ Saturday, June 18, 2022 10:30 AM, Accra Thursday, June 16, 2022 11:30 PM â†’ Saturday, June 18, 2022 12:30 AM, Paris Friday, June 17, 2022 1:30 AM â†’ Saturday, June 18, 2022 2:30 AM\" data-title=\"This is a new topic to check on chat quote issues\">\n        <svg class=\"fa d-icon d-icon-globe-americas svg-icon\" xmlns=\"http://www.w3.org/2000/svg\">\n          <use href=\"#globe-americas\"></use>\n        </svg>\n        <span class=\"relative-time\">June 18, 2022</span>\n      </span></p></div>`;\n      server.get(\"/t/280.json\", () => helper.response(topicResponse));\n      server.get(\"/t/280/:post_number.json\", () => {\n        helper.response(topicResponse);\n      });\n    });\n    (0, _qunit.test)(\"quoting a range of local dates\", async function (assert) {\n      await (0, _testHelpers.visit)(\"/t/internationalization-localization/280\");\n      await (0, _qunitHelpers.selectText)(\"#post_1 .select-local-date-test\");\n      await (0, _testHelpers.click)(\".insert-quote\");\n      assert.strictEqual((0, _qunitHelpers.query)(\".d-editor-input\").value.trim(), `[quote=\\\"Uwe Keim, post:1, topic:280, username:uwe_keim\\\"]\nSome text [date-range from=2022-06-17T09:30:00 to=2022-06-18T10:30:00 format=\"LL\" timezone=\"Australia/Brisbane\" timezones=\"Africa/Accra|Australia/Brisbane|Europe/Paris\"]\n[/quote]`, \"converts the date range to markdown with all options correctly\");\n    });\n  });\n  (0, _qunitHelpers.acceptance)(\"Local Dates - quoting with recurring and countdown\", function (needs) {\n    needs.user();\n    needs.settings({\n      discourse_local_dates_enabled: true\n    });\n    needs.pretender((server, helper) => {\n      const topicResponse = (0, _object.cloneJSON)(_topic.default[\"/t/280/1.json\"]);\n      const firstPost = topicResponse.post_stream.posts[0];\n      firstPost.cooked += `<div class='select-local-date-test'><p dir=\"ltr\">Testing countdown <span data-date=\"2022-06-21\" data-time=\"09:30:00\" class=\"discourse-local-date cooked-date\" data-format=\"LL\" data-countdown=\"true\" data-timezone=\"Australia/Brisbane\" data-email-preview=\"2022-06-20T23:30:00Z UTC\" aria-label=\"Brisbane Tuesday, June 21, 2022 <br /><svg class='fa d-icon d-icon-clock svg-icon svg-string' xmlns=&quot;http://www.w3.org/2000/svg&quot;><use href=&quot;#clock&quot; /></svg> 9:30 AM, Paris Tuesday, June 21, 2022 <br /><svg class='fa d-icon d-icon-clock svg-icon svg-string' xmlns=&quot;http://www.w3.org/2000/svg&quot;><use href=&quot;#clock&quot; /></svg> 1:30 AM, Los Angeles Monday, June 20, 2022 <br /><svg class='fa d-icon d-icon-clock svg-icon svg-string' xmlns=&quot;http://www.w3.org/2000/svg&quot;><use href=&quot;#clock&quot; /></svg> 4:30 PM\" data-title=\"This is a new topic to check on chat quote issues\">\n        <svg class=\"fa d-icon d-icon-globe-americas svg-icon\" xmlns=\"http://www.w3.org/2000/svg\">\n          <use href=\"#globe-americas\"></use>\n        </svg>\n        <span class=\"relative-time\">21 hours</span>\n      </span></p>\n      <p dir=\"ltr\">Testing recurring <span data-date=\"2022-06-22\" class=\"discourse-local-date cooked-date\" data-timezone=\"Australia/Brisbane\" data-recurring=\"2.weeks\" data-email-preview=\"2022-06-21T14:00:00Z UTC\" aria-label=\"Brisbane Wednesday, June 22, 2022 12:00 AM â†’ Thursday, June 23, 2022 12:00 AM, Paris Tuesday, June 21, 2022 4:00 PM â†’ Wednesday, June 22, 2022 4:00 PM, Los Angeles Tuesday, June 21, 2022 7:00 AM â†’ Wednesday, June 22, 2022 7:00 AM\" data-title=\"This is a new topic to check on chat quote issues\">\n        <svg class=\"fa d-icon d-icon-globe-americas svg-icon\" xmlns=\"http://www.w3.org/2000/svg\">\n          <use href=\"#globe-americas\"></use>\n        </svg>\n        <span class=\"relative-time\">Wednesday</span>\n      </span></p></div>`;\n      server.get(\"/t/280.json\", () => helper.response(topicResponse));\n      server.get(\"/t/280/:post_number.json\", () => {\n        helper.response(topicResponse);\n      });\n    });\n    (0, _qunit.test)(\"quoting single local dates with recurring and countdown options\", async function (assert) {\n      await (0, _testHelpers.visit)(\"/t/internationalization-localization/280\");\n      await (0, _qunitHelpers.selectText)(\"#post_1 .select-local-date-test\");\n      await (0, _testHelpers.click)(\".insert-quote\");\n      assert.strictEqual((0, _qunitHelpers.query)(\".d-editor-input\").value.trim(), `[quote=\\\"Uwe Keim, post:1, topic:280, username:uwe_keim\\\"]\nTesting countdown [date=2022-06-21 time=09:30:00 format=\"LL\" timezone=\"Australia/Brisbane\" countdown=\"true\"]\n\nTesting recurring [date=2022-06-22 timezone=\"Australia/Brisbane\" recurring=\"2.weeks\"]\n[/quote]`, \"converts the dates to markdown with all options correctly\");\n    });\n  });\n});","define(\"discourse/plugins/discourse-local-dates/lib/date-with-zone-helper-test\", [\"discourse/plugins/discourse-local-dates/lib/date-with-zone-helper\", \"qunit\"], function (_dateWithZoneHelper, _qunit) {\n  \"use strict\";\n\n  0; //eaimeta@70e063a35619d71f0,\"discourse/plugins/discourse-local-dates/lib/date-with-zone-helper\",0,\"qunit\"eaimeta@70e063a35619d71f\n\n  const PARIS = \"Europe/Paris\";\n  const SYDNEY = \"Australia/Sydney\";\n\n  function buildDateHelper() {\n    let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return new _dateWithZoneHelper.default({\n      year: params.year || 2020,\n      day: params.day || 22,\n      month: params.month || 2,\n      hour: params.hour || 10,\n      minute: params.minute || 5,\n      timezone: params.timezone,\n      localTimezone: PARIS\n    });\n  }\n\n  (0, _qunit.module)(\"lib:date-with-zone-helper\", function () {\n    (0, _qunit.test)(\"#format\", function (assert) {\n      let date = buildDateHelper({\n        day: 15,\n        month: 2,\n        hour: 15,\n        minute: 36,\n        timezone: PARIS\n      });\n      assert.strictEqual(date.format(), \"2020-03-15T15:36:00.000+01:00\");\n    });\n    (0, _qunit.test)(\"#unitRepetitionsBetweenDates\", function (assert) {\n      let date;\n      date = buildDateHelper({\n        day: 15,\n        month: 1,\n        hour: 15,\n        minute: 36,\n        timezone: PARIS\n      });\n      assert.strictEqual(date.unitRepetitionsBetweenDates(\"1.hour\", moment.tz(\"2020-02-15 15:36\", SYDNEY)), 10, \"it correctly finds difference between timezones\");\n      date = buildDateHelper({\n        day: 15,\n        month: 1,\n        hour: 15,\n        minute: 36,\n        timezone: PARIS\n      });\n      assert.strictEqual(date.unitRepetitionsBetweenDates(\"1.minute\", moment.tz(\"2020-02-15 15:36\", PARIS)), 0, \"it correctly finds no difference\");\n      date = buildDateHelper({\n        day: 15,\n        month: 1,\n        hour: 15,\n        minute: 36,\n        timezone: PARIS\n      });\n      assert.strictEqual(date.unitRepetitionsBetweenDates(\"1.minute\", moment.tz(\"2020-02-15 15:37\", PARIS)), 1, \"it correctly finds no difference\");\n      date = buildDateHelper({\n        day: 15,\n        month: 1,\n        hour: 15,\n        minute: 36,\n        timezone: PARIS\n      });\n      assert.strictEqual(date.unitRepetitionsBetweenDates(\"2.minutes\", moment.tz(\"2020-02-15 15:41\", PARIS)), 6, \"it correctly finds difference with a multiplicator\");\n    });\n    (0, _qunit.test)(\"#add\", function (assert) {\n      let date;\n      let futureLocalDate;\n      date = buildDateHelper({\n        day: 19,\n        month: 2,\n        hour: 15,\n        minute: 36,\n        timezone: PARIS\n      });\n      assert.notOk(date.isDST());\n      futureLocalDate = date.add(8, \"months\");\n      assert.notOk(futureLocalDate.isDST());\n      assert.strictEqual(futureLocalDate.format(), \"2020-11-19T15:36:00.000+01:00\", \"it correctly adds from a !isDST date to a !isDST date\");\n      date = buildDateHelper({\n        day: 25,\n        month: 3,\n        hour: 15,\n        minute: 36,\n        timezone: PARIS\n      });\n      assert.ok(date.isDST());\n      futureLocalDate = date.add(1, \"year\");\n      assert.ok(futureLocalDate.isDST());\n      assert.strictEqual(futureLocalDate.format(), \"2021-04-25T15:36:00.000+02:00\", \"it correctly adds from a isDST date to a isDST date\");\n      date = buildDateHelper({\n        day: 25,\n        month: 2,\n        hour: 15,\n        minute: 36,\n        timezone: PARIS\n      });\n      assert.notOk(date.isDST());\n      futureLocalDate = date.add(1, \"week\");\n      assert.ok(futureLocalDate.isDST());\n      assert.strictEqual(futureLocalDate.format(), \"2020-04-01T15:36:00.000+02:00\", \"it correctly adds from a !isDST date to a isDST date\");\n      date = buildDateHelper({\n        day: 1,\n        month: 3,\n        hour: 15,\n        minute: 36,\n        timezone: PARIS\n      });\n      assert.ok(date.isDST());\n      futureLocalDate = date.add(8, \"months\");\n      assert.notOk(futureLocalDate.isDST());\n      assert.strictEqual(futureLocalDate.format(), \"2020-12-01T15:36:00.000+01:00\", \"it correctly adds from a isDST date to a !isDST date\");\n    });\n  });\n});","define(\"discourse/plugins/discourse-local-dates/lib/local-date-builder-test\", [\"I18n\", \"discourse/plugins/discourse-local-dates/lib/local-date-builder\", \"sinon\", \"qunit\"], function (_I18n, _localDateBuilder, _sinon, _qunit) {\n  \"use strict\";\n\n  0; //eaimeta@70e063a35619d71f0,\"I18n\",0,\"discourse/plugins/discourse-local-dates/lib/local-date-builder\",0,\"sinon\",0,\"qunit\"eaimeta@70e063a35619d71f\n\n  const UTC = \"Etc/UTC\";\n  const SYDNEY = \"Australia/Sydney\";\n  const LOS_ANGELES = \"America/Los_Angeles\";\n  const NEW_YORK = \"America/New_York\";\n  const PARIS = \"Europe/Paris\";\n  const LAGOS = \"Africa/Lagos\";\n  const LONDON = \"Europe/London\";\n\n  function freezeTime(_ref, cb) {\n    let {\n      date,\n      timezone\n    } = _ref;\n    date = date || \"2020-01-22 10:34\";\n    const newTimezone = timezone || PARIS;\n    const previousZone = moment.tz.guess();\n    const now = moment.tz(date, newTimezone).valueOf();\n\n    _sinon.default.useFakeTimers(now);\n\n    _sinon.default.stub(moment.tz, \"guess\");\n\n    moment.tz.guess.returns(newTimezone);\n    moment.tz.setDefault(newTimezone);\n    cb();\n    moment.tz.guess.returns(previousZone);\n    moment.tz.setDefault(previousZone);\n\n    _sinon.default.restore();\n  }\n\n  _qunit.default.assert.buildsCorrectDate = function (options, expected, message) {\n    const localTimezone = options.localTimezone || PARIS;\n    delete options.localTimezone;\n    const localDateBuilder = new _localDateBuilder.default(Object.assign({}, {\n      date: \"2020-03-22\"\n    }, options), localTimezone);\n\n    if (expected.formatted) {\n      this.test.assert.strictEqual(localDateBuilder.build().formatted, expected.formatted, message || \"it formats the date correctly\");\n    }\n\n    if (expected.previews) {\n      this.test.assert.deepEqual(localDateBuilder.build().previews, expected.previews, message || \"it formats the previews correctly\");\n    }\n  };\n\n  (0, _qunit.module)(\"lib:local-date-builder\", function () {\n    (0, _qunit.test)(\"date\", function (assert) {\n      freezeTime({\n        date: \"2020-03-11\"\n      }, () => {\n        assert.buildsCorrectDate({\n          date: \"2020-03-22\",\n          timezone: PARIS\n        }, {\n          formatted: \"March 22, 2020\"\n        }, \"it displays the date without time\");\n      });\n    });\n    (0, _qunit.test)(\"date and time\", function (assert) {\n      assert.buildsCorrectDate({\n        date: \"2020-04-11\",\n        time: \"11:00\"\n      }, {\n        formatted: \"April 11, 2020 1:00 PM\"\n      }, \"it displays the date with time\");\n      assert.buildsCorrectDate({\n        date: \"2020-04-11\",\n        time: \"11:05:12\",\n        format: \"LTS\"\n      }, {\n        formatted: \"1:05:12 PM\"\n      }, \"it displays full time (hours, minutes, seconds)\");\n    });\n    (0, _qunit.test)(\"option[format]\", function (assert) {\n      freezeTime({\n        date: \"2020-03-11\"\n      }, () => {\n        assert.buildsCorrectDate({\n          format: \"YYYY\"\n        }, {\n          formatted: \"2020 (UTC)\"\n        }, \"it uses custom format\");\n      });\n    });\n    (0, _qunit.test)(\"option[displayedTimezone]\", function (assert) {\n      freezeTime({}, () => {\n        assert.buildsCorrectDate({\n          displayedTimezone: SYDNEY\n        }, {\n          formatted: \"March 22, 2020 (Sydney)\"\n        }, \"it displays the timezone if the timezone is different from the date\");\n      });\n      freezeTime({}, () => {\n        assert.buildsCorrectDate({\n          displayedTimezone: PARIS,\n          timezone: PARIS\n        }, {\n          formatted: \"March 22, 2020\"\n        }, \"it doesn't display the timezone if the timezone is the same than the date\");\n      });\n      freezeTime({}, () => {\n        assert.buildsCorrectDate({\n          timezone: UTC,\n          displayedTimezone: UTC\n        }, {\n          formatted: \"March 22, 2020 (UTC)\"\n        }, \"it replaces `Etc/`\");\n      });\n      freezeTime({}, () => {\n        assert.buildsCorrectDate({\n          timezone: LOS_ANGELES,\n          displayedTimezone: LOS_ANGELES\n        }, {\n          formatted: \"March 22, 2020 (Los Angeles)\"\n        }, \"it removes prefix and replaces `_`\");\n      });\n    });\n    (0, _qunit.test)(\"option[timezone]\", function (assert) {\n      freezeTime({}, () => {\n        assert.buildsCorrectDate({\n          timezone: SYDNEY,\n          displayedTimezone: PARIS\n        }, {\n          formatted: \"March 21, 2020\"\n        }, \"it correctly parses a date with the given timezone context\");\n      });\n    });\n    (0, _qunit.test)(\"option[recurring]\", function (assert) {\n      freezeTime({\n        date: \"2020-04-06 06:00\",\n        timezone: LAGOS\n      }, () => {\n        assert.buildsCorrectDate({\n          date: \"2019-11-25\",\n          time: \"11:00\",\n          timezone: PARIS,\n          displayedTimezone: LAGOS,\n          recurring: \"1.weeks\"\n        }, {\n          formatted: \"April 6, 2020 10:00 AM (Lagos)\"\n        }, \"it correctly formats a recurring date starting from a !isDST timezone to a isDST timezone date when displayed to a user using a timezone with no DST\");\n      });\n      freezeTime({\n        date: \"2020-04-06 01:00\",\n        timezone: SYDNEY\n      }, () => {\n        assert.buildsCorrectDate({\n          date: \"2020-03-09\",\n          time: \"02:00\",\n          timezone: UTC,\n          recurring: \"1.weeks\",\n          calendar: false,\n          displayedTimezone: SYDNEY\n        }, {\n          formatted: \"April 6, 2020 12:00 PM (Sydney)\"\n        }, \"it correctly formats a recurring date spanning over weeks\");\n      });\n      freezeTime({\n        date: \"2020-04-07 22:00\"\n      }, () => {\n        assert.buildsCorrectDate({\n          date: \"2019-11-25\",\n          time: \"11:00\",\n          recurring: \"1.weeks\",\n          timezone: PARIS\n        }, {\n          formatted: \"April 13, 2020 11:00 AM\"\n        }, \"it correctly adds from a !isDST date to a isDST date\");\n      });\n      freezeTime({\n        date: \"2020-04-06 10:59\"\n      }, () => {\n        assert.buildsCorrectDate({\n          date: \"2020-03-30\",\n          time: \"11:00\",\n          recurring: \"1.weeks\",\n          timezone: PARIS\n        }, {\n          formatted: \"Today 11:00 AM\"\n        }, \"it works to the minute\");\n      });\n      freezeTime({\n        date: \"2020-04-06 11:01\"\n      }, () => {\n        assert.buildsCorrectDate({\n          date: \"2020-03-30\",\n          time: \"11:00\",\n          recurring: \"1.weeks\",\n          timezone: PARIS\n        }, {\n          formatted: \"April 13, 2020 11:00 AM\"\n        }, \"it works to the minute\");\n      });\n      freezeTime({\n        date: \"2020-12-28 09:16\"\n      }, () => {\n        assert.buildsCorrectDate({\n          date: \"2021-01-24\",\n          time: \"08:30\",\n          recurring: \"1.weeks\",\n          timezone: NEW_YORK\n        }, {\n          formatted: \"January 24, 2021 2:30 PM\"\n        }, \"it works for a future date\");\n      });\n      freezeTime({\n        date: \"2021-01-08 11:16\"\n      }, () => {\n        assert.buildsCorrectDate({\n          date: \"2021-01-05\",\n          time: \"14:00\",\n          recurring: \"2.hours\",\n          timezone: NEW_YORK\n        }, {\n          formatted: \"Today 12:00 PM\"\n        }, \"it works with hours\");\n      });\n    });\n    (0, _qunit.test)(\"option[countdown]\", function (assert) {\n      freezeTime({\n        date: \"2020-03-21 23:59\"\n      }, () => {\n        assert.buildsCorrectDate({\n          countdown: true,\n          timezone: PARIS\n        }, {\n          formatted: \"a minute\"\n        }, \"it shows the time remaining\");\n      });\n      freezeTime({\n        date: \"2020-03-22 00:01\"\n      }, () => {\n        assert.buildsCorrectDate({\n          countdown: true,\n          timezone: PARIS\n        }, {\n          formatted: _I18n.default.t(\"discourse_local_dates.relative_dates.countdown.passed\")\n        }, \"it shows the date has passed\");\n      });\n    });\n    (0, _qunit.test)(\"option[calendar]\", function (assert) {\n      freezeTime({\n        date: \"2020-03-23 23:00\"\n      }, () => {\n        assert.buildsCorrectDate({\n          date: \"2020-03-22\",\n          time: \"23:59\",\n          timezone: PARIS\n        }, {\n          formatted: \"Yesterday 11:59 PM\"\n        }, \"it drops calendar mode when event date is more than one day before current date\");\n      });\n      freezeTime({\n        date: \"2020-03-20 23:59\"\n      }, () => assert.buildsCorrectDate({\n        date: \"2020-03-21\",\n        time: \"01:00\",\n        timezone: PARIS\n      }, {\n        formatted: \"Tomorrow 1:00 AM\"\n      }));\n      freezeTime({\n        date: \"2020-03-20 23:59\"\n      }, () => assert.buildsCorrectDate({\n        date: \"2020-03-21\",\n        time: \"00:00\",\n        timezone: PARIS\n      }, {\n        formatted: \"Saturday\"\n      }, \"it displays the day with no time when the time in the displayed timezone is 00:00\"));\n      freezeTime({\n        date: \"2020-03-20 23:59\"\n      }, () => {\n        assert.buildsCorrectDate({\n          date: \"2020-03-21\",\n          time: \"23:59\",\n          timezone: PARIS\n        }, {\n          formatted: \"Tomorrow 11:59 PM\"\n        });\n      });\n      freezeTime({\n        date: \"2020-03-21 00:00\"\n      }, () => assert.buildsCorrectDate({\n        date: \"2020-03-21\",\n        time: \"23:00\",\n        timezone: PARIS\n      }, {\n        formatted: \"Today 11:00 PM\"\n      }));\n      freezeTime({\n        date: \"2020-03-22 23:59\"\n      }, () => assert.buildsCorrectDate({\n        date: \"2020-03-21\",\n        time: \"23:59\",\n        timezone: PARIS\n      }, {\n        formatted: \"Yesterday 11:59 PM\"\n      }));\n      freezeTime({\n        date: \"2020-03-22 23:59\"\n      }, () => assert.buildsCorrectDate({\n        date: \"2020-03-21\",\n        time: \"23:59\",\n        timezone: PARIS\n      }, {\n        formatted: \"Yesterday 11:59 PM\"\n      }));\n      freezeTime({\n        date: \"2020-03-22 23:59\"\n      }, () => assert.buildsCorrectDate({\n        calendar: false,\n        date: \"2020-03-21\",\n        time: \"23:59\",\n        timezone: PARIS\n      }, {\n        formatted: \"March 21, 2020 11:59 PM\"\n      }, \"it doesn't use calendar when disabled\"));\n      freezeTime({\n        date: \"2020-03-24 01:00\"\n      }, () => assert.buildsCorrectDate({\n        date: \"2020-03-21\",\n        timezone: PARIS\n      }, {\n        formatted: \"March 21, 2020\"\n      }, \"it stops formatting out of calendar range\"));\n      freezeTime({\n        date: \"2020-05-12\",\n        timezone: LOS_ANGELES\n      }, () => {\n        assert.buildsCorrectDate({\n          date: \"2020-05-13\",\n          time: \"18:00\",\n          localTimezone: LOS_ANGELES\n        }, {\n          formatted: \"Tomorrow 11:00 AM\"\n        }, \"it correctly displays a different local timezone\");\n      });\n    });\n    (0, _qunit.test)(\"previews\", function (assert) {\n      freezeTime({\n        date: \"2020-03-22\"\n      }, () => {\n        assert.buildsCorrectDate({\n          timezone: PARIS\n        }, {\n          previews: [{\n            current: true,\n            formatted: \"Sunday, March 22, 2020 12:00 AM â†’ Monday, March 23, 2020 12:00 AM\",\n            timezone: \"Paris\"\n          }]\n        });\n      });\n      freezeTime({\n        date: \"2020-03-22\",\n        timezone: PARIS\n      }, () => {\n        assert.buildsCorrectDate({\n          timezone: PARIS,\n          timezones: [SYDNEY]\n        }, {\n          previews: [{\n            current: true,\n            formatted: \"Sunday, March 22, 2020 12:00 AM â†’ Monday, March 23, 2020 12:00 AM\",\n            timezone: \"Paris\"\n          }, {\n            formatted: \"Sunday, March 22, 2020 10:00 AM â†’ Monday, March 23, 2020 10:00 AM\",\n            timezone: \"Sydney\"\n          }]\n        });\n      });\n      freezeTime({\n        date: \"2020-03-22\",\n        timezone: PARIS\n      }, () => {\n        assert.buildsCorrectDate({\n          timezone: PARIS,\n          displayedTimezone: LOS_ANGELES\n        }, {\n          previews: [{\n            current: true,\n            formatted: \"Sunday, March 22, 2020 12:00 AM â†’ Monday, March 23, 2020 12:00 AM\",\n            timezone: \"Paris\"\n          }]\n        });\n      });\n      freezeTime({\n        date: \"2020-03-22\",\n        timezone: PARIS\n      }, () => {\n        assert.buildsCorrectDate({\n          timezone: PARIS,\n          displayedTimezone: PARIS\n        }, {\n          previews: [{\n            current: true,\n            formatted: \"Sunday, March 22, 2020 12:00 AM â†’ Monday, March 23, 2020 12:00 AM\",\n            timezone: \"Paris\"\n          }]\n        });\n      });\n      freezeTime({\n        date: \"2020-03-22\",\n        timezone: PARIS\n      }, () => {\n        assert.buildsCorrectDate({\n          timezone: PARIS,\n          timezones: [PARIS]\n        }, {\n          previews: [{\n            current: true,\n            formatted: \"Sunday, March 22, 2020 12:00 AM â†’ Monday, March 23, 2020 12:00 AM\",\n            timezone: \"Paris\"\n          }]\n        });\n      });\n      freezeTime({\n        date: \"2020-03-22\",\n        timezone: PARIS\n      }, () => {\n        assert.buildsCorrectDate({\n          duration: 90,\n          timezone: PARIS,\n          timezones: [PARIS]\n        }, {\n          previews: [{\n            current: true,\n            formatted: 'Sunday, March 22, 2020 <br /><svg class=\\'fa d-icon d-icon-clock svg-icon svg-string\\' xmlns=\"http://www.w3.org/2000/svg\"><use href=\"#clock\" /></svg> 12:00 AM â†’ 1:30 AM',\n            timezone: \"Paris\"\n          }]\n        });\n      });\n      freezeTime({\n        date: \"2020-03-22\",\n        timezone: PARIS\n      }, () => {\n        assert.buildsCorrectDate({\n          duration: 1440,\n          timezone: PARIS,\n          timezones: [PARIS]\n        }, {\n          previews: [{\n            current: true,\n            formatted: \"Sunday, March 22, 2020 12:00 AM â†’ Monday, March 23, 2020 12:00 AM\",\n            timezone: \"Paris\"\n          }]\n        });\n      });\n      freezeTime({\n        date: \"2020-03-22\",\n        timezone: PARIS\n      }, () => {\n        assert.buildsCorrectDate({\n          time: \"11:34\",\n          timezone: PARIS,\n          timezones: [PARIS]\n        }, {\n          previews: [{\n            current: true,\n            formatted: 'Sunday, March 22, 2020 <br /><svg class=\\'fa d-icon d-icon-clock svg-icon svg-string\\' xmlns=\"http://www.w3.org/2000/svg\"><use href=\"#clock\" /></svg> 11:34 AM',\n            timezone: \"Paris\"\n          }]\n        });\n      });\n      freezeTime({\n        date: \"2020-04-06\",\n        timezone: PARIS\n      }, () => {\n        assert.buildsCorrectDate({\n          timezone: PARIS,\n          date: \"2020-04-07\",\n          timezones: [LONDON, LAGOS, SYDNEY]\n        }, {\n          previews: [{\n            current: true,\n            formatted: \"Tuesday, April 7, 2020 12:00 AM â†’ Wednesday, April 8, 2020 12:00 AM\",\n            timezone: \"Paris\"\n          }, {\n            formatted: \"Monday, April 6, 2020 11:00 PM â†’ Tuesday, April 7, 2020 11:00 PM\",\n            timezone: \"London\"\n          }, {\n            formatted: \"Monday, April 6, 2020 11:00 PM â†’ Tuesday, April 7, 2020 11:00 PM\",\n            timezone: \"Lagos\"\n          }, {\n            formatted: \"Tuesday, April 7, 2020 8:00 AM â†’ Wednesday, April 8, 2020 8:00 AM\",\n            timezone: \"Sydney\"\n          }]\n        });\n      });\n      freezeTime({\n        date: \"2020-04-06\",\n        timezone: PARIS\n      }, () => {\n        assert.buildsCorrectDate({\n          timezone: PARIS,\n          date: \"2020-04-07\",\n          time: \"14:54\",\n          timezones: [LONDON, LAGOS, SYDNEY]\n        }, {\n          previews: [{\n            current: true,\n            formatted: 'Tuesday, April 7, 2020 <br /><svg class=\\'fa d-icon d-icon-clock svg-icon svg-string\\' xmlns=\"http://www.w3.org/2000/svg\"><use href=\"#clock\" /></svg> 2:54 PM',\n            timezone: \"Paris\"\n          }, {\n            formatted: 'Tuesday, April 7, 2020 <br /><svg class=\\'fa d-icon d-icon-clock svg-icon svg-string\\' xmlns=\"http://www.w3.org/2000/svg\"><use href=\"#clock\" /></svg> 1:54 PM',\n            timezone: \"London\"\n          }, {\n            formatted: 'Tuesday, April 7, 2020 <br /><svg class=\\'fa d-icon d-icon-clock svg-icon svg-string\\' xmlns=\"http://www.w3.org/2000/svg\"><use href=\"#clock\" /></svg> 1:54 PM',\n            timezone: \"Lagos\"\n          }, {\n            formatted: 'Tuesday, April 7, 2020 <br /><svg class=\\'fa d-icon d-icon-clock svg-icon svg-string\\' xmlns=\"http://www.w3.org/2000/svg\"><use href=\"#clock\" /></svg> 10:54 PM',\n            timezone: \"Sydney\"\n          }]\n        });\n      });\n      freezeTime({\n        date: \"2020-05-12\",\n        timezone: LOS_ANGELES\n      }, () => {\n        assert.buildsCorrectDate({\n          date: \"2020-05-13\",\n          time: \"18:00\",\n          localTimezone: LOS_ANGELES\n        }, {\n          previews: [{\n            current: true,\n            formatted: 'Wednesday, May 13, 2020 <br /><svg class=\\'fa d-icon d-icon-clock svg-icon svg-string\\' xmlns=\"http://www.w3.org/2000/svg\"><use href=\"#clock\" /></svg> 11:00 AM',\n            timezone: \"Los Angeles\"\n          }, {\n            formatted: 'Wednesday, May 13, 2020 <br /><svg class=\\'fa d-icon d-icon-clock svg-icon svg-string\\' xmlns=\"http://www.w3.org/2000/svg\"><use href=\"#clock\" /></svg> 6:00 PM',\n            timezone: \"UTC\"\n          }]\n        });\n      });\n    });\n  });\n});"],"names":[],"mappingspDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpnfile":"discourse-local-dates_tests.js"}